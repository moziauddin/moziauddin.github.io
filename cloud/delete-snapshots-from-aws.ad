= Delete Snapshots from AWS by filtering on a tag

== Introduction

You can back up the data on your Amazon EBS volumes to Amazon S3 by taking point-in-time snapshots. Snapshots are incremental backups, which means that only the blocks on the device that have changed after your most recent snapshot are saved. This minimizes the time required to create the snapshot and saves on storage costs by not duplicating data. Each snapshot contains all of the information that is needed to restore your data (from the moment when the snapshot was taken) to a new EBS volume. 

== Prerequisite tasks before you run the script

=== Get jq

Install jq by following the instructions link:https://stedolan.github.io/jq/download/[here]

> You can test if you have jq by typing `jq --help` in terminal

=== Get aws cli

Install the version of AWS cli for your OS by following instructions link:https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html[here]

> You can test if you have aws by typing `aws help` in terminal

=== Setup aws permissions to the device running the script

The device running this script will need to have appropriate permissions to delete the snapshot. To setup an IAM role, please follow the instructions link:https://docs.aws.amazon.com/cli/latest/userguide/getting-started-prereqs.html[here]

== The script

=== With one argument

Direct link to link:https://raw.githubusercontent.com/moziauddin/shared/master/cloud/aws/delete-snapshots-by-tag.sh[file]

[source,bash]
----
#!/bin/bash
# Dependencies: 
# Install jq
# Assign permissions to the instance running the script
#   1. Using IAM role (preferred)
#   2. Using AWS Key and Shared Secret in .aws/.credentials

if [[ -z $1 ]]; then
	echo ""
	echo " ERROR: Please pass the filter string as first argument"
	echo "    Example: ./delete-old-snapshots.sh '2021-01-*'"
        echo "    to delete all snapshots matching deleteOn date of Jan 2021"
	echo ""
	exit 1
fi

echo "PROCEED WITH CAUTION!!"
echo "Once deleted, snapshots cannot be recovered"
echo "UNCOMMENT line 29 to actually delete"
snap_ids=$(aws ec2 describe-snapshots --filters Name=tag:DeleteOn,Values=$1 | jq .Snapshots[].SnapshotId)
matched=$(echo $snap_ids | wc -w)
echo "Matched Snapshots: "$matched

if [[ $matched -ne 0 ]]; then
    for id in $snap_ids; 
    do
        new_id=$(echo $id | sed -e s/\"//g)
        echo "deleteing $new_id"
        # aws ec2 delete-snapshot --snapshot-id $new_id
    done
    echo "Successfully removed $matched snapshots"
else
    echo "No Snapshots to delete"
fi

----

=== With two arguments

Direct link to link:https://raw.githubusercontent.com/moziauddin/shared/master/cloud/aws/delete-snapshots-by-filter.sh[file]

[source,bash]
----
#!/bin/bash
# Dependencies: 
# Install jq
# Assign permissions to the instance running the script
#   1. Using IAM role (preferred)
#   2. Using AWS Key and Shared Secret in .aws/.credentials

if [[ -z $1 && -z $2 ]]; then
	echo ""
	echo " ERROR: Please pass the filter attribute as first argument and its value as second with wild card"
	echo "    Example: ./delete-old-snapshots.sh 'start-time' '2016*'"
        echo "    to delete all snapshots matching deleteOn date of Jan 2021"
	echo ""
	exit 1
fi
echo "Proceed with caution!"
echo "Once deleted, snapshots cannot be recovered"
echo "UNCOMMENT line 28 to actually delete"
snap_ids=$(aws ec2 describe-snapshots --filters Name=$1,Values=$2 | jq .Snapshots[].SnapshotId)
matched=$(echo $snap_ids | wc -w)
echo "Matched Snapshots: "$matched

if [[ $matched -ne 0 ]]; then
    for id in $snap_ids; 
    do
        new_id=$(echo $id | sed -e s/\"//g)
        echo "deleteing $new_id"
        # aws ec2 delete-snapshot --snapshot-id $new_id
    done
else
    echo "No Snapshots to delete"
fi
----
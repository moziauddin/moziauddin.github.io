////
 file: about.ad
 author: Mo Ziauddin

////

= Groovy Tutorials
:stylesheet: styles.css
:stylesdir: ../css
:toc: left
:toc-title: Persist Data Between Jobs in Jenkins
:icons: font

include::../blog-header.ad[]

== Persist Data Between Jobs in Jenkins

Sometimes you would want to persist data in Jenkins in the following scenarios.

. Persist data between two different Jenkins jobs
. Persist data between two builds of the same job

In such scenarios the best approach is to use files to persiste data. We can use a file to: 

. store key value pairs
. edit the values of existing properties
. add new properties
. delete existing properties

=== Reading and Writing to files in jenkins job

Jenkins provides the following functions to work with files.

. `readFile`
. `writeFile`

==== Reading a File

In a jenkins pipeline, we can use the following code as a stage to read a file. the below code reads a file called `variables.txt` from the current workspace.

[source,groovy]
----
node {
    stage('read file contents') {
        println readFile(file: 'variables.txt')
    }
}
----

==== Writing to a File

You can use the below snippet to write the text `myVar:value` to a file named `variables.txt`. The below snippet does not append to the existing contents, but overrides the contents of the file.

[source,groovy]
----
node {
    stage('read file contents') {
        writeFile(file: 'variables.txt', text: 'myVar:value')
    }
}
----

=== Putting it Together

The below code can be copied to a Jenkins pipeline and run. It will: 

. create a new file in `/tmp/` directory called `hello.txt`
. write a line to it 
. read the contents of the file 
. print to the standard output

[source,groovy]
----
node {
    def fileName = "/tmp/hello.txt"
    stage('Preparation') {
        sh 'pwd & rm -rf *'
    }

    stage('write to file') {
        writeFile(file: fileName, text: "myvar:hello", encoding: "UTF-8")
    }
    
    stage('read file contents') {
        println readFile(file: fileName)
    }
}
----

=== Adding and Deleting from the file

To add a property, we can use the below code. 

[source,groovy]
----
node {
    def fileName = "/tmp/hello.txt"
    stage('Preparation') {
        sh 'pwd & rm -rf *'
    }
    
    stage('Add property 1') {
        if (fileExists(fileName)) {
            existingContents = readFile(fileName)
        }
        newProperty = "newvar:newValue"
        writeFile(file: fileName, text: existingContents + "\n" + newProperty)
        println readFile(file: fileName)
    }
    
    stage('Add property 2') {
        if (fileExists(fileName)) {
            existingContents = readFile(fileName)
        }
        newProperty = "vaar3:vaar3value"
        writeFile(file: fileName, text: existingContents + "\n" + newProperty)
        println readFile(file: fileName)
    }
}
----

Finally, a working example of all ways to change the properties and treat this file as a flat file database is as follows.

[source,groovy]
----
node {
    def fileName = "/tmp/hello.txt"
    stage('Preparation') {
        sh 'pwd & rm -rf *'
    }

    stage('write to file') {
        writeFile(file: fileName, text: "myvar:hello", encoding: "UTF-8")
    }
    
    stage('read file contents') {
        println readFile(file: fileName)
    }
    
    stage('Add property 1') {
        if (fileExists(fileName)) {
            existingContents = readFile(fileName)
        }
        newProperty = "newvar:newValue"
        writeFile(file: fileName, text: existingContents + "\n" + newProperty)
        println readFile(file: fileName)
    }
    
    stage('Add property 2') {
        if (fileExists(fileName)) {
            existingContents = readFile(fileName)
        }
        newProperty = "vaar3:vaar3value"
        writeFile(file: fileName, text: existingContents + "\n" + newProperty)
        println readFile(file: fileName)
    }
    
    stage('get property'){
        def lines = readFile(file: fileName)
        def value = ''
        for (line in lines.split("\n")) {
            if (line.contains('newvar')) {
                value = line.split(':')[1]
            }
        }
        println "Value of newvar is: $value"
    }
    
    stage('Add property 2') {
        if (fileExists(fileName)) {
            existingContents = readFile(fileName)
        }
        newProperty = "vaar3:vaar3value"
        writeFile(file: fileName, text: existingContents + "\n" + newProperty)
        println readFile(file: fileName)
    }
    
    stage('update property'){
        def lines = readFile(file: fileName)
        def newValue = 'blah'
        def keyValue = 'newvar'
        def newContents = ''
        for (line in lines.split("\n")) {
            if (line.contains(keyValue)) {
                newContents += keyValue + ':' + newValue + '\n'
            } else {
                newContents += line + "\n"
            }
        }
        writeFile(file: fileName, text: newContents)
        println readFile(file: fileName)
    }
    
    stage('Delete property') {
        // check file exists
        def lines = readFile(file: fileName)
        def newContents = ''
        for (line in lines.split("\n")) {
            if (line.contains('newvar')) {
                continue
            } else {
                newContents += line + "\n"
            }
        }
        writeFile(file: fileName, text: newContents)
        println readFile(file: fileName)
    }
}
----

== Conclusion

We can use a flat file to persist data in jenkins using this simple example.